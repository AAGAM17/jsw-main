"""Interakt WhatsApp handler for sending project notifications."""

import logging
from datetime import datetime, timedelta
import requests
from config.settings import Config
import time
import base64
import re


class InteraktHandler:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.api_key = Config.INTERAKT_API_KEY
        # List of phone numbers to send notifications to
        self.phone_numbers = ["918484926925", "917715018407"]
        self.base_url = "https://api.interakt.ai/v1/public/message/"
        self.enabled = bool(self.api_key and self.phone_numbers)

        # Initialize Perplexity client
        from scrapers.perplexity_client import PerplexityClient
        self.perplexity = PerplexityClient()

        # Store project context
        self.project_context = {}

        # Initialize relationship context
        self.relationship_context = {
            'megha engineering': 'Procuring JSW Neosteel 550D & CRS TMT bars for bridge projects via Rakesh Sharma (Head-Projects)',
            'cube highways': 'Using JSW Galvanized Corrugated Sheets for highway crash barriers; negotiations ongoing for Solar Galvalume',
            'gr infraprojects': 'Regular buyer of JSW Cold Rolled coils for metro rail components through Arjun Mehta (Procurement VP)',
            'rail vikas nigam': 'Partnered for Neosteel 600 TMT bars and Electrical Steel slits for dedicated freight corridors',
            'j kumar': 'Sourcing Colour-Coated sheets for smart city housing via Priya Reddy (Materials Head)',
            'irb infra': 'Testing JSW Galvalume sheets for solar-powered toll plazas; existing GI sheet partnership since 2022',
            'ashoka buildcon': 'Bulk orders for Neosteel Fastbuild cut-bend bars for Mumbai coastal road project',
            'torrent power': 'Exclusive Electrical Steel supplier for transformer production through Anil Gupta (Strategic Sourcing)',
            'genus power': 'Annual contract for CRGO steel sheets for smart meter components',
            'patel engineering': 'Pilot use of JSW Neostrands PC strands in Himalayan tunnel projects',
            'nhai': 'Approved vendor for Hot Rolled plates in crash barriers; Galvanized sheets under quality evaluation',
            'msrfc': 'Negotiating AL-ZN coated coils for solar carport structures with R&D team',
            'gmr airports': 'Using Colour-Coated GL sheets for new terminal roofs via Tendering Division',
            'l&t construction': 'Supplying 4 Neosteel variants for high-rise projects through Naveen Kumar (Procurement VP)',
            'adani infra': 'MoU signed for Galvalume supply to 12 solar parks; testing CR sheets for data centers',
            'tata projects': 'JSW TrustSteel plates used in refinery expansion; Neosteel EDS bars in R&D phase',
            'shapoorji pallonji': 'Historic partnership for GI sheets in luxury projects; new CR coil trial initiated',
            'ncc ltd': '75% steel procurement from JSW including HR coils for industrial warehouses',
            'hyundai rotem': 'Prototyping Electrical Steel for metro rolling stock components',
            'kec international': 'Approved for Galvanized tower parts supply; TMT bar negotiations pending',
            'welspun enterprises': 'Testing JSW Galvalume sheets for solar farm mounting structures; existing orders for CR coils in pipeline projects',
            'bl kashyap': 'Procuring Colour-Coated GI sheets for commercial building façades via Rajeev Choudhary (Purchase Manager)',
            'jaiprakash associates': 'Bulk orders for JSW TrustSteel HR plates in dam construction; negotiating Neosteel 550D for bridges',
            'siddharth infratech': 'Pilot use of JSW Neosteel CRS bars in coastal highway projects with Kumar Verma (Project Head)',
            'rohan builders': 'Regular buyer of Galvanized Corrugated Sheets for affordable housing roofing; exploring Colour-Coated options',
            'sankalp construction': 'Partnered for Neosteel Fastbuild cut-bend bars in industrial park projects through Nidhi Agarwal (Procurement Lead)',
            'pioneer infratech': 'Approved vendor for JSW Electrical Steel slits in power substation projects since 2023',
            'apex construction': 'Using JSW GI sheets for warehouse roofing; negotiations stalled for CR coils due to pricing',
            'vishal infratech': 'Trial order for JSW Neostrands PC strands in pre-stressed bridge girders; quality review pending',
            'shreeji construction': 'Procuring TMT 550D bars for mid-rise residential towers via annual rate contract',
            'suryadev infrastructures': 'Testing JSW Solar Galvalume sheets for rooftop installations; existing HR coil partnership',
            'vatsal infrastructure': 'Negotiating AL-ZN coated sheets for bus depot roofs with Rakesh Modi (Head-Projects)',
            'keshav infrastructure': 'Bulk orders for JSW Cold Rolled coils for metro rail coach components',
            'apco infratech': 'Pilot use of Neosteel EDS bars in earthquake-resistant structures; R&D collaboration ongoing',
            'dilip buildcon': 'Strategic partner for JSW Neosteel 600 bars in expressway projects; 30% YoY growth in procurement',
            'pnc infratech': 'Approved for Galvanized sheets in water treatment plants; CR coil supply under negotiation',
            'hg infra engineering': 'Exclusive contract for JSW TMT bars in Rajasthan highway expansion through Ajay Saxena (VP-SCM)',
            'afcons infrastructure': 'Procuring JSW TrustSteel plates for offshore projects; testing CRS bars for marine corrosion resistance',
            'itd cementation': 'Procuring JSW TrustSteel HR plates for metro tunnel linings; testing Galvanized sheets for corrosion-prone sections',
            'shanghai tunnel engineering': 'Pilot use of JSW Electrical Steel slits for tunnel ventilation systems; negotiations led by Li Wei (China Procurement Head)',
            'yfc projects': 'Sourcing Colour-Coated GI sheets for airport terminal façades via annual framework agreement',
            'knr constructions': 'Approved vendor for JSW Galvalume sheets in solar-powered highway lighting structures',
            'thikedaar': 'Small-scale orders for CR coils in modular housing projects; exploring Neosteel TMT bars for expansion',
            'ahluwalia contracts': 'Bulk orders for JSW Neosteel 550D bars in luxury high-rises; partnered with Rohan Mehta (Head Procurement)',
            'techno electric': 'Strategic supplier of JSW Electrical Steel for transformer cores in grid projects',
            'psp projects': 'Using JSW Neosteel Fastbuild cut-bend bars for Gujarat industrial corridor; 20% cost-saving reported',
            'simplex infrastructures': 'Limited procurement of CR coils due to financial constraints; historical partnership for GI sheets',
            'jmc projects': 'Regular buyer of Neosteel 600 bars for bridge pylons; negotiating AL-ZN sheets for façades',
            'titagarh rail systems': 'Prototyping JSW Electrical Steel for locomotive components; R&D collaboration initiated',
            'blue oak construction': 'Rural projects using Galvanized Corrugated Sheets; price-sensitive buyer for TMT bars',
            'gammon india': 'Minimal orders for TrustSteel plates post-restructuring; exploring Galvalume for solar projects',
            'alstom': 'Testing JSW Electrical Steel for rail traction systems; quality certification pending',
            'beml': 'Procuring JSW Special Alloy Steel for defense vehicle chassis through government tenders',
            'mitsubishi corporation': 'Indirect sourcing via JSW for CR coils in Japanese-funded infrastructure projects',
            'shankaranarayana constructions': 'Regional partner for Neosteel CRS bars in coastal Andhra Pradesh projects'}

        if self.enabled:
            self.logger.info(
                f"Interakt WhatsApp notifications enabled. Target numbers: {', '.join(self.phone_numbers)}")
            # Validate API key format
            if not self._is_valid_api_key(self.api_key):
                self.logger.error("Invalid API key format")
                self.enabled = False
        else:
            self.logger.error("Interakt configuration incomplete")

    def _is_valid_api_key(self, api_key):
        """Validate if the API key is properly base64 encoded"""
        try:
            # Try to decode the API key
            decoded = base64.b64decode(api_key).decode('utf-8')
            return ':' in decoded  # Basic auth typically contains a colon
        except Exception:
            return False

    def _format_phone_number(self, phone):
        """Format phone number to match Interakt requirements"""
        # Remove all non-digit characters
        clean_number = ''.join(filter(str.isdigit, phone))

        # Validate length (assuming Indian numbers)
        if len(clean_number) < 10 or len(clean_number) > 12:
            self.logger.error(
                f"Invalid phone number length: {len(clean_number)} digits")
            return None

        # Ensure it has country code
        if len(clean_number) == 10:
            clean_number = '91' + clean_number
        elif not clean_number.startswith('91'):
            self.logger.error(
                "Phone number must be an Indian number starting with 91")
            return None

        return clean_number

    def handle_incoming_message(self, phone_number, message_text):
        """Handle incoming WhatsApp messages using Perplexity AI"""
        try:
            self.logger.info(
                f"Received message from {phone_number}: {message_text}")

            # Get project context for this user
            context = self.project_context.get(phone_number, {})

            # Get relationship context if company is mentioned
            relationship_info = ""
            if context.get('company'):
                company_name = context.get('company', '').lower()
                relationship_info = self.relationship_context.get(
                    company_name, '')
                if relationship_info:
                    relationship_info = f"\nRelationship Notes: {relationship_info}"

            # Prepare context for AI
            ai_context = ""
            if context:
                ai_context = f"""
                Project Context:
                Title: {context.get('title')}
                Company: {context.get('company')}
                Value: ₹{context.get('value', 0)} Crore
                Description: {context.get('description')}
                Steel Requirements: {context.get('steel_requirements', {})}
                Start Date: {context.get('start_date')}
                End Date: {context.get('end_date')}
                Source: {context.get('source_url')}{relationship_info}
                """

            # Add system context
            ai_context += """
            You are a helpful AI assistant for JSW Steel's project discovery system.
            You help users understand project details, steel requirements, and procurement opportunities.
            Keep responses concise and focused on steel/construction aspects.
            If relationship notes are available, use them to provide context about existing partnerships and contacts.
            If you don't have enough context, ask for clarification.
            """

            # Get AI response
            response = self.perplexity.get_project_info(
                ai_context + "\n\nUser question: " + message_text)

            # Send response back via WhatsApp
            self._send_whatsapp_response(phone_number, response)

            return True

        except Exception as e:
            self.logger.error(f"Error handling incoming message: {str(e)}")
            error_msg = "Sorry, I encountered an error processing your message. Please try again."
            self._send_whatsapp_response(phone_number, error_msg)
            return False

    def _send_whatsapp_response(self, phone_number, message):
        """Send WhatsApp response to a specific number"""
        try:
            headers = {
                'Authorization': f'Basic {self.api_key}',
                'Content-Type': 'application/json'
            }

            payload = {
                "userId": f"chat_{phone_number}",
                "fullPhoneNumber": phone_number,
                "campaignId": "festive_giveaway",
                "type": "Text",
                "data": {
                    "message": message
                }
            }

            response = requests.post(
                self.base_url,
                headers=headers,
                json=payload,
                timeout=30
            )

            if response.json().get('result') is True:
                self.logger.info(
                    f"Response sent successfully to {phone_number}")
                return True
            else:
                self.logger.error(f"Failed to send response to {phone_number}")
                return False

        except Exception as e:
            self.logger.error(f"Error sending WhatsApp response: {str(e)}")
            return False

    def send_project_opportunities(self, projects):
        """Send project opportunities via WhatsApp using Interakt"""
        if not self.enabled:
            self.logger.error("WhatsApp notifications are not enabled")
            return False

        if not projects:
            self.logger.warning("No projects to send notifications for")
            return False

        # First, filter out any companies that have JSW relationships
        # All companies in relationship context have JSW ties
        companies_with_jsw = set(self.relationship_context.keys())

        # Enhanced JSW project filtering
        jsw_terms = [
            # Company names and variations
            'jsw', 'jindal', 'js steel', 'jindal steel', 'jindal steel & power',
            'jindal steel and power', 'jsw steel limited', 'jsw group',
            'jsw infrastructure', 'jsw energy', 'jsw holdings',

            # JSW Products and brands
            'jsw neosteel', 'jsw steel', 'jsw trusteel', 'neosteel', 'trusteel',
            'jsw fastbuild', 'jsw galvalume', 'jsw colour coated', 'jsw coated',
            'jsw gi', 'jsw hr', 'jsw cr', 'jsw tmt', 'jsw electrical steel',
            'jsw special steel', 'jsw plates',

            # Product variations
            'neosteel 550d', 'neosteel 600', 'neosteel eds', 'neosteel crs',
            'neosteel fastbuild', 'neostrands pc', 'trusteel plates',
            'jsw galvanized', 'jsw colour-coated', 'jsw coated',

            # Generic product terms (when used with JSW context)
            'tmt bars', 'gi sheets', 'hr coils', 'cr coils', 'galvalume',
            'colour-coated', 'color-coated', 'electrical steel', 'special steel',
            'steel plates', 'steel coils', 'steel sheets'
        ]

        # Filter out JSW projects and log them
        jsw_projects = []
        filtered_projects = []

        for project in projects:
            company = project.get('company', '').lower()
            title = project.get('title', '').lower()
            description = project.get('description', '').lower()

            # Skip if company has JSW relationship
            if company in companies_with_jsw:
                jsw_projects.append(project)
                self.logger.debug(
                    f"Filtered - Company has JSW relationship: {project.get('company')}")
                self.logger.debug(
                    f"Relationship: {self.relationship_context.get(company, '')}")
                continue

            # Check for JSW terms in all text fields
            all_text = f"{company} {title} {description}".lower()

            if any(term in all_text for term in jsw_terms):
                jsw_projects.append(project)
                self.logger.debug(
                    f"Filtered - Contains JSW terms: {project.get('company')}")
                self.logger.debug(f"Title: {project.get('title')}")
                continue

            # Check for steel product mentions that might indicate JSW
            # involvement
            steel_terms = [
                'steel', 'tmt', 'bars', 'coils', 'plates', 'sheets',
                'galvanized', 'colour-coated', 'color-coated', 'galvalume'
            ]

            # If project mentions steel products, double check it's not
            # JSW-related
            if any(term in all_text for term in steel_terms):
                # Skip if there's any hint of JSW connection
                if any(
                    term in all_text for term in [
                        'jsw',
                        'jindal',
                        'neosteel',
                        'trusteel']):
                    jsw_projects.append(project)
                    self.logger.debug(
                        f"Filtered - Steel products with JSW connection: {project.get('company')}")
                    continue

            # If passed all filters, add to filtered projects
            filtered_projects.append(project)

        # Log filtering results
        if jsw_projects:
            self.logger.info(
                f"Filtered out {len(jsw_projects)} JSW-related projects:")
            for project in jsw_projects:
                self.logger.info(
                    f"- {project.get('company')}: {project.get('title')}")
                if project.get('company',
                               '').lower() in self.relationship_context:
                    self.logger.info(
                        f"  Relationship: {self.relationship_context[project.get('company', '').lower()]}")

        if not filtered_projects:
            self.logger.info("No non-JSW projects to send notifications for")
            return False

        self.logger.info(
            f"Sending notifications for {len(filtered_projects)} non-JSW projects:")
        for project in filtered_projects:
            self.logger.info(
                f"- {project.get('company')}: {project.get('title')}")

        overall_success = True

        # Send to each phone number
        for phone_number in self.phone_numbers:
            try:
                # Store project context for this user
                for project in filtered_projects:
                    project_key = f"{project.get('company')}_{project.get('title')}".lower(
                    ).replace(' ', '_')
                    if phone_number not in self.project_context:
                        self.project_context[phone_number] = {}
                    self.project_context[phone_number][project_key] = project

                self.logger.info(
                    f"Attempting to send notifications for {len(filtered_projects)} projects to {phone_number}")

                # Send overview message first
                overview = self._format_overview_message(filtered_projects)
                overview += "\n\n💡 *Reply to this message with any questions about these projects!*"

                overview_payload = {
                    "userId": f"overview_{phone_number}",
                    "fullPhoneNumber": phone_number,
                    "campaignId": "festive_giveaway",
                    "type": "Text",
                    "data": {
                        "message": overview
                    }
                }

                headers = {
                    'Authorization': f'Basic {self.api_key}',
                    'Content-Type': 'application/json'
                }

                # Send overview
                response = requests.post(
                    self.base_url,
                    headers=headers,
                    json=overview_payload,
                    timeout=30
                )

                if not (response.json().get('result')
                        is True and response.json().get('id')):
                    self.logger.error(
                        f"Failed to send overview message to {phone_number}")
                    overall_success = False
                else:
                    self.logger.info(
                        f"Overview message sent successfully to {phone_number}")

                # Send detailed messages for each project
                for idx, project in enumerate(filtered_projects, 1):
                    self.logger.debug(
                        f"Sending project #{idx} details to {phone_number}")
                    message = self._format_project_message(project, idx)
                    message += "\n\n💬 *Ask me anything about this project!*"

                    project_payload = {
                        "userId": f"project_{idx}_{phone_number}",
                        "fullPhoneNumber": phone_number,
                        "campaignId": "festive_giveaway",
                        "type": "Text",
                        "data": {
                            "message": message
                        }
                    }

                    response = requests.post(
                        self.base_url,
                        headers=headers,
                        json=project_payload,
                        timeout=30
                    )

                    response_data = response.json()
                    if response_data.get(
                            'result') is True and response_data.get('id'):
                        self.logger.info(
                            f"Project #{idx} message sent successfully to {phone_number}")
                    else:
                        self.logger.error(
                            f"Failed to send project #{idx} message to {phone_number}")
                        overall_success = False

                    # Add a small delay between messages to prevent rate
                    # limiting
                    time.sleep(1)

            except Exception as e:
                self.logger.error(
                    f"Error sending project opportunities to {phone_number}: {str(e)}")
                overall_success = False
                continue

        self.logger.info(
            f"Finished sending notifications to all numbers. Success: {overall_success}")
        return overall_success

    def _format_overview_message(self, projects):
        """Format overview message for multiple projects"""
        overview = f"🏗️ *New Project Opportunities*\n\nFound {len(projects)} new projects:\n"
        for idx, project in enumerate(projects, 1):
            overview += f"\n{idx}. {project['company']} - {project['title']}"
            if project.get('value'):
                overview += f" (₹{project['value']:.1f} Cr)"
        return overview

    def _format_project_message(self, project, idx):
        """Format a single project message"""
        try:
            message = f"*Project #{idx} Details*\n\n"
            
            # Basic info
            message += f"*Company:* {project.get('company', 'N/A')}\n"
            message += f"*Project:* {project.get('title', 'N/A')}\n\n"
            
            # Value and timeline
            if project.get('value'):
                message += f"*Value:* ₹{float(project['value']):.1f} Crore\n"
            
            if project.get('start_date'):
                message += f"*Start Date:* {project['start_date'].strftime('%B %Y')}\n"
            if project.get('end_date'):
                message += f"*End Date:* {project['end_date'].strftime('%B %Y')}\n"
            message += "\n"
            
            # Steel requirements if available
            if project.get('steel_requirements'):
                message += "*Steel Requirements:*\n"
                steel_reqs = project['steel_requirements']
                if isinstance(steel_reqs, dict):
                    for key, value in steel_reqs.items():
                        if isinstance(value, dict):
                            message += f"• {value.get('type', key)}: {value.get('quantity', 0):,} MT\n"
                        elif isinstance(value, (int, float)):
                            message += f"• {key}: {value:,} MT\n"
                message += "\n"
            
            # Add contact information
            if project.get('contacts'):
                message += "*Key Contacts:*\n"
                for contact in project['contacts']:
                    message += f"• {contact.get('name', 'N/A')} - {contact.get('role', 'N/A')}\n"
                    if contact.get('email'):
                        message += f"  Email: {contact['email']}\n"
                    if contact.get('phone'):
                        message += f"  Phone: {contact['phone']}\n"
                message += "\n"
            
            # Source and additional info
            if project.get('source_url'):
                message += f"*Source:* {project['source_url']}\n"
            if project.get('description'):
                message += f"\n*Description:*\n{project['description'][:300]}..."
            
            return message
            
        except Exception as e:
            self.logger.error(f"Error formatting project message: {str(e)}")
            return f"Error formatting project #{idx}. Please check the logs."

    def test_connection(self):
        """Test the Interakt API connection and configuration"""
        if not self.enabled:
            self.logger.error(
                "Cannot test: WhatsApp notifications not enabled")
            self.logger.error(
                f"API Key present: {'Yes' if self.api_key else 'No'}")
            self.logger.error(
                "Phone numbers present: " +
                ", ".join(
                    self.phone_numbers))
            return False

        overall_success = True

        # Test each phone number
        for phone_number in self.phone_numbers:
            self.logger.info(f"Testing connection with phone: {phone_number}")

            # Prepare headers with proper Base64 encoding if needed
            auth_header = self.api_key if self._is_valid_api_key(
                self.api_key) else base64.b64encode(
                self.api_key.encode()).decode()

            headers = {
                'Authorization': f'Basic {auth_header}',
                'Content-Type': 'application/json'
            }

            # Test message
            test_payload = {
                "userId": f"test_user_{phone_number}",
                "fullPhoneNumber": phone_number,
                "campaignId": "festive_giveaway",
                "type": "Text",
                "data": {
                    "message": "🔍 Test message from JSW Project Discovery"
                }
            }

            try:
                self.logger.info(f"Sending test request to {phone_number}...")

                response = requests.post(
                    self.base_url,
                    headers=headers,
                    json=test_payload,
                    timeout=30
                )

                self.logger.info(
                    f"Response Status Code for {phone_number}: {response.status_code}")
                self.logger.info(
                    f"Response Body for {phone_number}: {response.text}")

                try:
                    response_data = response.json()
                    if response_data.get(
                            'result') is True and response_data.get('id'):
                        self.logger.info(
                            f"Message queued successfully for {phone_number} with ID: {response_data['id']}")
                    else:
                        self.logger.error(
                            f"Test failed for {phone_number} - Please verify:")
                        self.logger.error(
                            "1. Your phone number is registered with Interakt")
                        self.logger.error("2. Your API key is correct")
                        self.logger.error(
                            "3. You have an active subscription with Interakt")
                        self.logger.error(
                            "4. You have sent a message to Interakt's WhatsApp number")
                        self.logger.error(
                            "5. You have approved receiving messages")
                        overall_success = False
                except ValueError:
                    self.logger.error(
                        f"Invalid JSON response for {phone_number}: {response.text}")
                    overall_success = False

            except Exception as e:
                self.logger.error(
                    f"Test connection failed for {phone_number}: {str(e)}")
                overall_success = False

        return overall_success

    def _send_whatsapp(self, message, max_retries=3):
        """Send WhatsApp message using Interakt API"""
        if not self.enabled:
            self.logger.error(
                "Cannot send message: WhatsApp notifications not enabled")
            self.logger.error(
                f"API Key present: {'Yes' if self.api_key else 'No'}")
            self.logger.error(
                f"Phone numbers present: {'Yes' if self.phone_numbers else 'No'}")
            return False

        if not self.phone_numbers:
            self.logger.error("Invalid phone numbers format")
            return False

        overall_success = True

        # Send to each phone number
        for phone_number in self.phone_numbers:
            try:
                self.logger.info(f"Sending message to {phone_number}...")

                # Prepare headers with proper Base64 encoding if needed
                auth_header = self.api_key if self._is_valid_api_key(
                    self.api_key) else base64.b64encode(
                    self.api_key.encode()).decode()

                headers = {
                    'Authorization': f'Basic {auth_header}',
                    'Content-Type': 'application/json'
                }

                # Prepare payload according to Interakt API specification
                payload = {
                    "userId": "user_" + phone_number,
                    "fullPhoneNumber": phone_number,
                    "campaignId": "festive_giveaway",
                    "type": "Text",
                    "data": {
                        "message": message
                    }
                }

                self.logger.debug(f"Full URL: {self.base_url}")
                self.logger.debug(f"Headers: {headers}")
                self.logger.debug(f"Payload: {payload}")

                for attempt in range(max_retries):
                    try:
                        self.logger.debug(
                            f"Sending message to {phone_number} (Attempt {attempt + 1}/{max_retries})")

                        response = requests.post(
                            self.base_url,
                            headers=headers,
                            json=payload,
                            timeout=30
                        )

                        self.logger.info(
                            f"API Response Status for {phone_number}: {response.status_code}")
                        self.logger.info(
                            f"API Response for {phone_number}: {response.text}")

                        try:
                            response_data = response.json()
                            if response_data.get(
                                    'result') is True and response_data.get('id'):
                                self.logger.info(
                                    f"Message queued successfully for {phone_number} with ID: {response_data['id']}")
                            else:
                                error_msg = response_data.get(
                                    'message', 'Unknown error')
                                self.logger.error(
                                    f"Failed to send WhatsApp message to {phone_number}: {error_msg}")
                                self.logger.error(
                                    f"Response Status: {response.status_code}")
                                self.logger.error(
                                    f"Response Body: {response.text}")

                                # Add helpful error messages
                                if response.status_code == 401:
                                    self.logger.error(
                                        "Authentication failed - Please verify your API key")
                                elif response.status_code == 404:
                                    self.logger.error(
                                        "API endpoint not found - Please verify the API URL")
                                elif response.status_code == 400:
                                    self.logger.error(
                                        "Bad request - Please verify phone number format and message content")

                                if attempt < max_retries - 1:
                                    self.logger.info(
                                        f"Will retry in {2 ** attempt} seconds")
                                    time.sleep(2 ** attempt)
                        except ValueError:
                            self.logger.error(
                                f"Invalid JSON response for {phone_number}: {response.text}")
                            if attempt < max_retries - 1:
                                time.sleep(2 ** attempt)
                            continue

                    except Exception as e:
                        self.logger.error(
                            f"Exception details for {phone_number}: {str(e)}", exc_info=True)
                        if attempt == max_retries - 1:
                            self.logger.error(
                                f"Failed to send WhatsApp to {phone_number} after {max_retries} attempts: {str(e)}")
                        else:
                            self.logger.warning(
                                f"Attempt {attempt + 1} failed for {phone_number}, retrying...")
                        if attempt < max_retries - 1:
                            time.sleep(2 ** attempt)
                        continue

            except Exception as e:
                self.logger.error(
                    f"Error sending message to {phone_number}: {str(e)}")
                overall_success = False
                continue

        self.logger.info(
            f"Finished sending messages to all numbers. Success: {overall_success}")
        return overall_success

    def test_project_message(self):
        """Test sending a real project message"""
        test_project = {
            'title': 'Test Project - Metro Construction',
            'company': 'ABC Constructions',
            'value': 850.5,
            'description': 'Major metro construction project in Mumbai',
            'start_date': datetime.now(),
            'end_date': datetime.now() + timedelta(days=365),
            'steel_requirements': {
                'primary': {'type': 'TMT Bars', 'quantity': 12000},
                'secondary': {'type': 'HR Plates', 'quantity': 6000},
                'total': 18000
            },
            'contacts': [{
                'name': 'Rajesh Kumar',
                'role': 'Procurement Manager',
                'email': 'rajesh.k@abcconstructions.com',
                'phone': '+91 98765 43210'
            }],
            'source_url': 'https://example.com/project'
        }
        
        # Format the message
        message = self._format_project_message(test_project, 1)
        
        # Send it using the direct message approach
        payload = {
            "userId": "test_project",
            "fullPhoneNumber": self.phone_numbers[0],
            "campaignId": "festive_giveaway",
            "type": "Text",
            "data": {
                "message": message
            }
        }
        
        headers = {
            'Authorization': f'Basic {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        try:
            self.logger.info("Sending test project message...")
            self.logger.debug(f"Message content:\n{message}")
            
            response = requests.post(
                self.base_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            self.logger.info(f"Response Status: {response.status_code}")
            self.logger.info(f"Response Body: {response.text}")
            
            response_data = response.json()
            if response_data.get('result') is True and response_data.get('id'):
                self.logger.info(f"Project message queued successfully with ID: {response_data['id']}")
                return True
            else:
                self.logger.error(f"Failed to send project message: {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"Error sending test project message: {str(e)}")
            return False
